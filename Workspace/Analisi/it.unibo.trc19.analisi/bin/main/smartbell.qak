System tearoom

Request 	notify       	: 	notify(X)	
Reply   	tempResult   	: 	tempResult(V)

Request 	checkAvail   	: 	checkAvail(ID)	
Reply   	waitingTime 	: 	waitingTime(TIME)

Dispatch	accept			: 	accept(Y)
Dispatch	inform			: 	inform(TIME) 


Context ctxtearoom  ip [host="localhost" port=8038]

ExternalQActor client context ctxtearoom
ExternalQActor waiter context ctxtearoom

QActor smartbell context ctxtearoom{  
	[#  
		var temperature     = 37.5
		var clientID        = 0
	#]   
	  
	State s0 initial {	     
 		discardMsg Off
 	} 
	Goto  waitingForClient  
	
	State waitingForClient{
		println("Waiting for a new client...")
 	} 
	Transition t0 whenRequest notify      -> checkTemp

	State checkTemp{ 
 		println("Checking your temperature...")
 		[# 
 			val randomNumber = Math.random()
 			if  (randomNumber >= 0.7)
 				temperature = 39.0
 			else
 				temperature = 37.0		
 		#]
 	}
 	Goto badTemp if [# temperature > 37.5 #] else goodTemp
 
 	State badTemp{   
		println("You should go to the hospital! ")
   		replyTo notify with tempResult : tempResult(no)
  	}
	Goto waitingForClient
	
	State goodTemp{   
		println("Your temperature is ok ")
		[# clientID++ #]
   		replyTo notify with tempResult : tempResult(yes)
  	}
	Goto waiterInfo
 	
 	State waiterInfo {  
 		println("Checking table situation with the waiter... ")
 		request waiter -m checkAvail : checkAvail( clientID )
 	}
    Transition t1 	whenReply waitingTime -> informClient
    				
 	
 	State informClient{
  		if [# payloadArg(0).toDouble() == 0.0 	#] {
  			println("A waiter is coming... ")
  			forward client -m accept : accept(Y)
  		} else {
  			println("You have to wait... ")
  			forward client -m inform : inform(payloadArg(0))
  		}
 	}   
 	Goto waitingForClient 
 	
 	
} 