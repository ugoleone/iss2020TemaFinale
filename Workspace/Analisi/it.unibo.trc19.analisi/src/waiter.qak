
System /*-trace*/ tearoom

//interazione ingresso client
Request  checkAvail : checkAvail(X) 
Reply    waitingTime : waitingTime(X)
Request  tabStatus : tabStatus(X) 
Reply    tabState : tabState(X)    

//interazione ordinazione client
//prima immagine
Dispatch readyToOrder : readyToOrder(X) 

//seconda immagine
Request take : take(X)
Reply order : order(X)
Dispatch orderReq : orderReq(X) 
  
//terza immagine  
Dispatch ready : ready(X) 

//interazione richiesta uscita client  
Dispatch exitReq : exitReq(X)

//interazione pagamento client
Request  collect : collect(X) 
Reply    payment : payment(X)

//interazione con timer
Dispatch startTimer : startTimer(X)
Dispatch endTime : endTime(X)

Context ctxtearoom ip [ host= "localhost"   port= 8038 ]  

ExternalQActor table1 context ctxtearoom 
ExternalQActor table2 context ctxtearoom 
ExternalQActor client context ctxtearoom
ExternalQActor barman context ctxtearoom

QActor waiter context ctxtearoom{ 
	State s0 initial{ 
		println("waiter is starting..I'm HOME!") 
		[# var tabFree = 0#]
		delay 200
		discardMsg Off
	} 
	Goto reqHandler
	
 	State reqHandler{
 		println("I'm HOME, waiting for a request!")	
 	}
 	Transition t0 
 		whenRequest checkAvail -> acceptance		
 		whenMsg readyToOrder -> takingOrder 
 		whenMsg ready -> collectingDrink 
 		whenMsg exitReq -> exitClient 
 		whenMsg endTime -> payment
 	
 	State acceptance{
 		request table1 -m tabStatus : tabStatus(1)
 		onMsg( tabState : tabState( STATUS ) ){
			[# tabFree = payloadArg(0) #]
			if [# tabFree != "free and clean"#]{
				request table2 -m tabStatus : tabStatus(1)
				onMsg( tabState : tabState( STATUS ) ){
					[# tabFree = payloadArg(0) #]
					if [# tabFree != "free and clean"#]{
						replyTo checkAvail with waitingTime : waitingTime(2000)
						//waitingTime fisso per semplicità
					}
					else {
						replyTo checkAvail with waitingTime : waitingTime(0)
					}
				}
			}
			else {
				replyTo checkAvail with waitingTime : waitingTime(0)
			}					 		 
 		}
	}
	Goto reqHandler
	
	State collectingDrink{
		println("I'm collecting the drink from the barman")
		delay 200
		println("I'm taking the drink to the client")
	}
	Goto reqHandler
	
	State takingOrder{
		println("I'm collecting the order from the client")
		request client -m take : take(1) 
		onMsg( order : order( ORDER ) ){
			forward barman -m orderReq : orderReq( $payloadArg(0) )
		}
		println("I'm taking the drink to the client")
	}
	Goto reqHandler
	
	State exitClient{
		println("Client requested to exit! Proceeding to the payment")
	}
	Goto payment
	
	State payment{
		println("Collecting the money!")
		request client -m collect : collect(1)
		onMsg(payment : payment( MONEY )){
			[# println(payloadArg(0) + "€ collected! Have a nice day!") #]
		}
	}
	Goto reqHandler
}

//supponiamo un solo cliente per volta

QActor timer context ctxtearoom{
	State s0 initial{ 
		println("timer is starting..") 
	} 
	Goto waitingToStart
	
	State waitingToStart{
	}
	Transition t0 
 		whenMsg startTimer -> watchDog
	
 	State watchDog{
 	}
 	Transition t0 
 		whenTime 1000 -> exitMsg
 	
 	State exitMsg{
 		forward waiter -m endTime : endTime(1)
 	}
}


