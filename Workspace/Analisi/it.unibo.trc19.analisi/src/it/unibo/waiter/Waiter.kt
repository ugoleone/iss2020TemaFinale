/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	
				var tabFree = "" 
				var tableToCheck = 1 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[WAITER] waiter is starting..I'm HOME!")
						delay(200) 
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("reqHandler") { //this:State
					action { //it:State
						println("[WAITER] I'm HOME, waiting for a request!")
						 tableToCheck = 1  
					}
					 transition(edgeName="t00",targetState="checkTableState",cond=whenRequest("checkAvail"))
					transition(edgeName="t01",targetState="takingOrder",cond=whenDispatch("readyToOrder"))
					transition(edgeName="t02",targetState="collectingDrink",cond=whenDispatch("ready"))
					transition(edgeName="t03",targetState="exitClient",cond=whenDispatch("exitReq"))
					transition(edgeName="t04",targetState="payment",cond=whenDispatch("endTime"))
				}	 
				state("checkTableState") { //this:State
					action { //it:State
						if(  tableToCheck == 1  
						 ){request("tabStatus", "tabStatus(1)" ,"table1" )  
						}
						else
						 {request("tabStatus", "tabStatus(1)" ,"table2" )  
						 }
					}
					 transition(edgeName="t05",targetState="handleTabState",cond=whenReply("tabState"))
				}	 
				state("handleTabState") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tabState(X)"), Term.createTerm("tabState(STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 tabFree = payloadArg(0)  
								if(  tabFree == "FreeClean" 
								 ){answer("checkAvail", "waitingTime", "waitingTime(0)"   )  
								}
								else
								 { tableToCheck = 2  
								 }
						}
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitchGuarded({ tabFree == "FreeClean"  
					}) )
					transition( edgeName="goto",targetState="checkTableState", cond=doswitchGuarded({! ( tabFree == "FreeClean"  
					) }) )
				}	 
				state("collectingDrink") { //this:State
					action { //it:State
						println("[WAITER] I'm collecting the drink from the barman")
						delay(200) 
						println("[WAITER] I'm taking the drink to the client")
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("takingOrder") { //this:State
					action { //it:State
						println("[WAITER] I'm collecting the order from the client")
						request("take", "take(1)" ,"client" )  
					}
					 transition(edgeName="t06",targetState="clientReady",cond=whenReply("order"))
				}	 
				state("clientReady") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("order(X)"), Term.createTerm("order(ORDER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("orderReq", "orderReq(${payloadArg(0)})" ,"barman" ) 
						}
						println("[WAITER] I'm taking the drink to the client")
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("exitClient") { //this:State
					action { //it:State
						println("[WAITER] Client requested to exit! Proceeding to the payment")
					}
					 transition( edgeName="goto",targetState="payment", cond=doswitch() )
				}	 
				state("payment") { //this:State
					action { //it:State
						println("[WAITER] Collecting the money!")
						request("collect", "collect(1)" ,"client" )  
					}
					 transition(edgeName="t07",targetState="handlePayment",cond=whenReply("payment"))
				}	 
				state("handlePayment") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("payment(X)"), Term.createTerm("payment(MONEY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 println("[WAITER] " + payloadArg(0) + " EUR collected! Have a nice day!")  
						}
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
			}
		}
}
