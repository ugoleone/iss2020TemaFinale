System tearoom

Request 	notify 	: 	notify(X)
Reply		tempResult	:	tempResult(X)

Dispatch	accept	:	accept(X)
Dispatch	inform	:	inform(X)

Dispatch	readyToOrder	:	readyToOrder(X)

Request take 	:	take(X)
Reply 	order	:	order(X)

Dispatch exitReq	:	exitReq(X)

Request collect	:	collect(X)
Reply payment	:	payment(X)

Context ctxtearoom ip [host="localhost" port=8055]

ExternalQActor smartbell context ctxtearoom
ExternalQActor waiter context ctxtearoom

QActor client context ctxtearoom {
	[# var tempResult = "no"	#]
	State init initial {
		println("Client STARTED")
		discardMsg Off
	}
	Goto askToEnter
	
	State askToEnter {
		request smartbell -m notify : notify
	}
	Transition t0 whenReply tempResult -> handleReply
	
	
	State handleReply {
		onMsg(tempResult : tempResult(RES)){
			[# tempResult = payloadArg(0) #]
		}
	}Goto waitToEnter if [# tempResult == "yes" #] else exit
	
	State waitToEnter {
	} 
	Transition t0 	whenMsg inform -> wait
					whenMsg accept -> enter
	
	
	State wait {
		onMsg(inform : inform(TIME)){
			[# var Time = payloadArg(0).toLong() #]
			delayVar Time
		}
	}
	Goto enter
	
	State enter {
		delay 1000 // simulate going to table and choosing a drink
		forward waiter -m readyToOrder : readyToOrder(1)
	}
	Transition t0 whenRequest take -> makeOrder
	
	State makeOrder {
		replyTo take with order	: order(tea)
	}
	Goto drink
	
	State drink {
		delay 5000
	}Goto askToPay
	
	State askToPay {
		forward waiter -m 	exitReq	: exitReq(1)
	}Transition t0 whenRequest collect -> pay
	
	State pay {
		replyTo collect with payment : payment(10)
	}Goto exit
	
	State exit {
		println("Client EXIT")
	}
	
}