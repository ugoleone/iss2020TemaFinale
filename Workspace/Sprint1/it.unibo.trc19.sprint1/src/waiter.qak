
System /*-trace*/ waiter

//interazione ingresso client
Request  checkAvail : checkAvail(X) 
Reply    waitingTime : waitingTime(X)
Request  tabStatus : tabStatus(X) 
Reply    tabState : tabState(X)    

//interazione ordinazione client
//prima immagine
Dispatch readyToOrder : readyToOrder(X) 

//seconda immagine
Request take : take(X)
Reply order : order(X)
Dispatch orderReq : orderReq(X) 
  
//terza immagine  
Dispatch ready : ready(X) 

//interazione richiesta uscita client  
Dispatch exitReq : exitReq(X)

//interazione pagamento client
Request  collect : collect(X) 
Reply    payment : payment(X)



Context ctxwaiter ip [ host= "localhost"   port= 8010 ] 
Context ctxtable1 ip [ host= "192.168.1.166"   port= 8020 ] 
Context ctxtable2 ip [ host= "192.168.1.166"   port= 8030 ] 
Context ctxsmartbell ip [ host= "192.168.1.166"   port= 8040 ] 
Context ctxbarman ip [ host= "192.168.1.166"   port= 8050 ] 
Context ctxclient ip [ host= "192.168.1.166"   port= 8060 ] 

ExternalQActor table1 context ctxtable1
ExternalQActor table2 context ctxtable2
ExternalQActor smartbell context ctxsmartbell
ExternalQActor barman context ctxbarman
ExternalQActor client context ctxclient



QActor waiter context ctxwaiter{ 
	
	[# 	
		var tabFree = "" 
		var tableToCheck = 1 
	#]
	
	State s0 initial{ 
		println("[WAITER] waiter is starting..I'm HOME!") 	
		delay 200
		discardMsg Off
	} 
	Goto reqHandler
	
 	State reqHandler{
 		println("[WAITER] I'm HOME, waiting for a request!")
 		[# tableToCheck = 1 #]	
 	}
 	Transition t0 
 		whenRequest checkAvail -> checkTableState		
 		whenMsg readyToOrder -> takingOrder 
 		whenMsg ready -> collectingDrink 
 		whenMsg exitReq -> exitClient 
 	
 	State checkTableState{	
 		println("[WAITER] Checking table state")
 		if [# tableToCheck == 1 #] {
 			request table1 -m tabStatus : tabStatus(1)
 		} else {
 			request table2 -m tabStatus : tabStatus(1)
 		}
	}
	Transition t0 whenReply tabState -> handleTabState
	
	State handleTabState {
		onMsg( tabState : tabState( STATUS ) ){
			[# tabFree = payloadArg(0) #]
			if [# tabFree == "FreeClean"#]{
				println("[WAITER] A table is free!")
				replyTo checkAvail with waitingTime : waitingTime(0)
			} else {
				[# tableToCheck = 2 #]
			}					 		 
 		}
	}Goto reqHandler if [# tabFree == "FreeClean" #] else checkTableState
	
	State collectingDrink{
		println("[WAITER] I'm collecting the drink from the barman")
		delay 200
		println("[WAITER] I'm taking the drink to the client")
	}
	Goto reqHandler
	
	State takingOrder{
		println("[WAITER] I'm collecting the order from the client")
		request client -m take : take(1) 
	}Transition t0 whenReply order -> clientReady
	
	State clientReady {
		onMsg( order : order( ORDER ) ){
			forward barman -m orderReq : orderReq( $payloadArg(0) )
		}
		println("[WAITER] I'm taking the drink to the client")
	} Goto reqHandler
	
	State exitClient{
		println("[WAITER] Client requested to exit! Proceeding to the payment")
	}
	Goto payment
	
	State payment{
		println("[WAITER] Collecting the money!")
		request client -m collect : collect(1)
	}
	Transition t0 whenReply payment -> handlePayment
	
	State handlePayment {
		onMsg(payment : payment( MONEY )){
			[# println("[WAITER] " + payloadArg(0) + " EUR collected! Have a nice day!") #]
		}
	}
	Goto reqHandler
}


