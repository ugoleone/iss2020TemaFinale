
System /*-trace*/ tearoom

//interazione ingresso client
Request  checkAvail : checkAvail(X) 
Reply    waitingTime : waitingTime(X)
Request  tabStatus : tabStatus(X) 
Reply    tabState : tabState(X)    

//interazioni client
Request 	notify 	: 	notify(X)
Reply		tempResult	:	tempResult(X)
Dispatch	accept	:	accept(X)
Dispatch	inform	:	inform(X)

//interazione ordinazione client
//prima immagine
Dispatch readyToOrder : readyToOrder(X) 

//seconda immagine
Request take : take(X)
Reply order : order(X)
Dispatch orderReq : orderReq(X) 

//to add
Dispatch serveDrink : serveDrink(X)
  
//terza immagine  
Dispatch ready : ready(X) 

//interazione richiesta uscita client  
Dispatch exitReq : exitReq(X)

//interazione pagamento client
Request  collect : collect(X) 
Reply    payment : payment(X)


//interazione col planner
Dispatch doMove     : doMove(V)
Request moveTo : moveTo(X)
Dispatch  movetoCell : movetoCell(X,Y)
Reply    atcell     : atcell(X,Y)

//interazione col basicrobot
Dispatch cmd       	: cmd(MOVE)    
Request step : step(TIME)
Reply stepdone : stepdone(X)
Reply stepfail : stepfail(X)

//auto-messaggi di spostamento
Dispatch convoyTable : convoyTable(X)
Dispatch returnHome : returnHome(X)
Dispatch readyToTakeOrder : readyToTakeOrder(X)
Dispatch listenRequests : listenRequests(X)
Dispatch goTable1 : goTable1(X)
Dispatch pay : pay(X)


Context ctxtearoom ip [ host= "localhost"   port= 8010 ] 
Context ctxbasicrobot ip [ host= "127.0.0.1" port= 8070]

ExternalQActor basicrobot context ctxbasicrobot



QActor waiter context ctxtearoom{ 
	
	State s0 initial{ 
		println("[WAITER] waiter is starting..I'm HOME!") 
		solve( consult("sysRules.pl")	 ) 
		solve(consult("tearoomkb.pl"))	
		delay 1000
		discardMsg Off
	} 
	Goto reqHandler
	
 	State reqHandler{
 		println("[WAITER] Waiting for a request!")
 	}
 	Transition t0 
 		whenRequest checkAvail -> checkTableState		
 		whenMsg readyToOrder -> reachingClientToTakeOrder 
 		whenMsg ready -> collectingDrink 
 		whenMsg exitReq -> exitClient 
 	
 	State checkTableState {	
 		println("[WAITER] Checking table state")
 		replyTo checkAvail with waitingTime : waitingTime(0)
	}
	Goto reachEntranceDoor
	
	State reachEntranceDoor {
		solve(replaceRule(whatImDoing(_),whatImDoing(reach)))
	}Goto goingToEntranceDoor
	
	
	State reachingClientToTakeOrder{
		println("[WAITER] I'm collecting the order from the client")
		solve(replaceRule(whatImDoing(_),whatImDoing(takingOrder)))	
	}Goto goingToTable1 
	
	State takingOrder {
		request clientsimulator -m take : take(1) 
	}Transition t0 whenReply order -> clientReady
	
	State clientReady {
		onMsg( order : order( ORDER ) ){
			forward barman -m orderReq : orderReq( $payloadArg(0) )
		}
		println("[WAITER] I'm transmitting the order to the barman")
	} 
	Goto returnToHome
	
	State collectingDrink {	
		solve(replaceRule(whatImDoing(_),whatImDoing(collectingDrink))) 
	}Goto goingToBarman
	
	State servingDrinkToClient {
		println("[WAITER] Serving the drink")
		forward clientsimulator -m serveDrink : serveDrink(tea)
	}
	Goto returnToHome
	
	State exitClient{
		println("[WAITER] Client requested to exit! Proceeding to the payment")
		solve(replaceRule(whatImDoing(_),whatImDoing(exitClient)))
	}
	Goto goingToTable1
	
	State payment{
		println("[WAITER] Collecting the money!")
		request clientsimulator -m collect : collect(1)
	}
	Transition t0 whenReply payment -> handlePayment
	
	State handlePayment {
		onMsg(payment : payment( MONEY )){
			[# println("[WAITER] " + payloadArg(0) + " EUR collected! Have a nice day!") #]
		}
		solve(replaceRule(whatImDoing(_),whatImDoing(convoyExit)))
	}
	Goto goingToExitDoor
	
	
	// Stati legati al movimento
	
	State goingToEntranceDoor {	
		request planner -m moveTo : moveTo(entrancedoor)
	}Transition t1 whenReply atcell -> handleAtCell
	
	State goingToExitDoor {
		request planner -m moveTo : moveTo(exitdoor)
	}Transition t1 whenReply atcell -> handleAtCell
	
	State goingToBarman {
		request planner -m moveTo : moveTo(barman)
	}Transition t1 whenReply atcell -> handleAtCell
	
	State goingToTable1 {
		request planner -m moveTo : moveTo(teatable1)
	}Transition t1 whenReply atcell -> handleAtCell
	
	State goingToTable2 {
		request planner -m moveTo : moveTo(teatable2)
	}Transition t1 whenReply atcell -> handleAtCell
	
	
	// ora non si può interrompere 
	State returnToHome {
		solve(replaceRule(whatImDoing(_),whatImDoing(returnHome)))
		request planner -m moveTo : moveTo(home)
	}Transition t1 whenReply atcell -> handleAtCell
	
	State handleAtCell {
		solve(whatImDoing(Z))
		[# val WhatImDoing = getCurSol("Z").toString() #]
		onMsg(atcell : atcell(X,Y)){
			if [# WhatImDoing == "reach" #] {
				delay 5000
				solve(replaceRule(whatImDoing(_),whatImDoing(convoyTable)))
				forward waiter -m convoyTable : convoyTable(A)
			} 
			if [# WhatImDoing == "convoyTable" #] {
				delay 5000
				solve(replaceRule(whatImDoing(_),whatImDoing(returnHome)))
				forward waiter -m returnHome : returnHome(A)
			}
			if [# WhatImDoing == "returnHome" #] {
				delay 5000
				solve(replaceRule(whatImDoing(_),whatImDoing(nothing)))
				forward waiter -m listenRequests : listenRequests(A)
			}
			if [# WhatImDoing == "takingOrder"#] {
				delay 5000
				solve(replaceRule(whatImDoing(_),whatImDoing(take)))
				forward waiter -m readyToTakeOrder : readyToTakeOrder(A)
			}
			if [# WhatImDoing == "collectingDrink"#] {
				delay 5000
				solve(replaceRule(whatImDoing(_),whatImDoing(bringingDrinkToClient)))
				forward waiter -m goTable1 : goTable1(A)
			}
			if [# WhatImDoing == "bringingDrinkToClient" #] {
				delay 5000
				solve(replaceRule(whatImDoing(_),whatImDoing(servingDrinkToClient)))
				forward waiter -m serveDrink : serveDrink(A)
			}
			if [# WhatImDoing == "exitClient" #] {
				delay 5000
				forward waiter -m pay : pay(A)
			}
			if [# WhatImDoing == "convoyExit" #] {
				delay 5000
				solve(replaceRule(whatImDoing(_),whatImDoing(returnHome)))
				forward waiter -m returnHome : returnHome(A)
			} 
			
		}
	}	Transition t1 	whenMsg convoyTable -> goingToTable1  
						whenMsg returnHome -> returnToHome
						whenMsg readyToTakeOrder -> takingOrder
						whenMsg serveDrink -> servingDrinkToClient
						whenMsg listenRequests -> reqHandler
						whenMsg goTable1 -> goingToTable1
						whenMsg pay -> payment
	
}



/*
 * excutes a plan without 'interruption'
 */
QActor planner context ctxtearoom{  
[#
	var XT = "0"
	var YT = "0"
	var CurrentPlannedMove = ""
	var StepTime    	   = 100L
#]
	State s0 initial {	     
		//println("&&&  insensitivewalker STARTED")
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.plannerUtil.loadRoomMap( "teaRoomExplored" )
		solve( consult("sysRules.pl")	 ) 
		solve(consult("tearoomkb.pl"))	
		discardMsg Off
	}	
	Transition t0 whenRequest moveTo -> findTheCell
	
	State findTheCell {
		onMsg (moveTo : moveTo(A)) {
			[# var Spot = payloadArg(0) #]
			solve(pos($Spot,X,Y))
			[# 
			val X = getCurSol("X") 
		  	val Y = getCurSol("Y") 
			#]
			forward planner -m movetoCell : movetoCell($X,$Y)
		}
	}Transition t0 whenMsg movetoCell -> walk
	
	State walk{
		onMsg( movetoCell : movetoCell(X,Y) ){
			[# XT = payloadArg(0)
			   YT = payloadArg(1)			  
			 #]
			println("[PLANNER] MOVING to ($XT,$YT)")
			run itunibo.planner.plannerUtil.planForGoal("$XT","$YT")
		}
	}
	Goto execPlannedMoves
	
	
	State execPlannedMoves{ 
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		if [# CurrentPlannedMove.length > 0 # ]{
 			forward planner -m doMove : doMove($CurrentPlannedMove)
 		}else{
	     	println("[PLANNER] POINT ($XT,$YT) REACHED")
	     	replyTo moveTo with atcell : atcell($XT,$YT) 			
 		}
 	}
 	Transition t0 whenMsg doMove  -> execTheMove
 				  whenRequest moveTo and [# CurrentPlannedMove.length == 0 #]-> findTheCell
 				  
 	State execTheMove{ 
  		onMsg( doMove : doMove(M) ){ 	
  			if [# payloadArg(0) == "w" #] {
  				request basicrobot -m step : step(370)
  			} else {
  				forward basicrobot -m cmd : cmd($payloadArg(0))
  				delay 500	
  			}
  		}
  		[# 
  			val move = payloadArg(0)
  			itunibo.planner.plannerUtil.updateMap(move,"")
  		#]		 			
 	 } 
     Goto execPlannedMoves if [# payloadArg(0) != "w" #] else waitStepDoneFail
     
     State waitStepDoneFail {
     } Transition t1 	whenReply stepdone -> updateCurrentPos
     					whenReply stepfail -> updateCurrentPos
     					
     State updateCurrentPos {
     	[# 
     		val X = itunibo.planner.plannerUtil.getPosX()
     		val Y = itunibo.planner.plannerUtil.getPosY()
     	#]
     	solve(replaceRule(currentPos(_,_), currentPos($X,$Y)))
     }Goto execPlannedMoves
     
 }
 



QActor smartbell context ctxtearoom{  
	[#  
		var temperature     = 37
		var clientID        = 0
	#]   
	  
	State s0 initial {	     
 		discardMsg Off
 	} 
	Goto  waitingForClient  
	
	State waitingForClient{
		println("[SMARTBELL] Waiting for a new client...")
 	} 
	Transition t0 whenRequest notify      -> checkTemp

	State checkTemp{ 
 		println("[SMARTBELL] Checking your temperature...")
 		/*[# 
 			val randomNumber = Math.random()
 			if  (randomNumber >= 0.7)
 				temperature = 39.0
 			else
 				temperature = 37.0		
 		#]*/
 	}
 	Goto badTemp if [# temperature > 37.5 #] else goodTemp
 
 	State badTemp{   
		println("[SMARTBELL] You should go to the hospital! ")
   		replyTo notify with tempResult : tempResult(no)
  	}
	Goto waitingForClient
	
	State goodTemp{   
		println("[SMARTBELL] Your temperature is ok ")
		[# clientID++ #]
   		replyTo notify with tempResult : tempResult(yes)
  	}
	Goto waiterInfo
 	
 	State waiterInfo {  
 		println("[SMARTBELL] Checking table situation with the waiter... ")
 		request waiter -m checkAvail : checkAvail( clientID )
 	}
    Transition t1 	whenReply waitingTime -> informClient
    				
 	
 	State informClient{
 		onMsg(waitingTime : waitingTime(X)){
  			if [# payloadArg(0).toDouble() == 0.0 	#] {
  				println("[SMARTBELL] A waiter is coming... ")
  				forward clientsimulator -m accept : accept(enter)
  			} else {
  				println("[SMARTBELL] You have to wait... ")
  				forward clientsimulator -m inform : inform($payloadArg(0))
  			}
  		}
 	}   
 	Goto waitingForClient 
 	
}

QActor clientsimulator context ctxtearoom {
	[# var tempResult = "no"	#]
	State init initial {
		println("[CLIENT] Client STARTED")
		discardMsg Off
	}
	Goto askToEnter
	
	State askToEnter {
		println("[CLIENT] Knock Knock, I'm here")
		request smartbell -m notify : notify
	}
	Transition t0 whenReply tempResult -> handleReply
	
	
	State handleReply {
		onMsg(tempResult : tempResult(RES)){
			[# tempResult = payloadArg(0) #]
		}
	}Goto waitToEnter if [# tempResult == "yes" #] else exit
	
	State waitToEnter {
	} 
	Transition t1 	whenMsg inform -> wait
					whenMsg accept -> enter
	
	
	State wait {
		println("[CLIENT] I have to wait")
		onMsg(inform : inform(TIME)){
			[# var Time = payloadArg(0).toLong() #]
			delayVar Time
		}
	}
	Goto enter
	
	State enter {
		println("[CLIENT] Choosing a drink")
		delay 1000 // simulate going to table and choosing a drink
		forward waiter -m readyToOrder : readyToOrder(1)
	}
	Transition t0 whenRequest take -> makeOrder
	
	State makeOrder {
		println("[CLIENT] A Na-tea-li please")
		replyTo take with order	: order(tea)
	}
	// qua bisogna fare una transition, devo aspettare di ricevere l'ordine
	Transition t0 whenMsg serveDrink -> drink
	
	State drink {
		println("[CLIENT] *sip sip* Delicious tea")
		delay 10000
	}Goto askToPay
	
	State askToPay {
		println("[CLIENT] I want to pay")
		forward waiter -m 	exitReq	: exitReq(1)
	}Transition t0 whenRequest collect -> pay
	
	State pay {
		println("[CLIENT] Paying")
		replyTo collect with payment : payment(10)
	}Goto exit
	
	State exit {
		println("[CLIENT] Client EXIT Byeeee!")
		terminate 1
	}
	
}

QActor barman context ctxtearoom{  
	  	  
	State s0 initial {	     
 		discardMsg Off
 	} 
	Goto  waitingForOrder 
	
	State waitingForOrder{
		println("[BARMAN] Waiting for a new order...")
 	} 
	Transition t0 whenMsg orderReq      -> makeTea

	State makeTea{ 
 		println("[BARMAN] Making some delicious tea...")
 		delay 2000
 	}
 	Goto teaReady
 
 	State teaReady{   
		println("[BARMAN] The tea is ready!")
   		forward waiter -m ready : ready(tea)
  	}
	Goto waitingForOrder
		 	
} 
 