
System /*-trace*/ tearoom

//interazione ingresso client
Request  checkAvail : checkAvail(X) 
Reply    waitingTime : waitingTime(X)
Request  tabStatus : tabStatus(X) 
Reply    tabState : tabState(X)    

//interazioni client
Request 	notify 	: 	notify(X)
Reply		tempResult	:	tempResult(X)
Dispatch	accept	:	accept(X)
Dispatch	inform	:	inform(X)

//interazione ordinazione client
//prima immagine
Dispatch readyToOrder : readyToOrder(X) 

//seconda immagine
Request take : take(X)
Reply order : order(X)
Dispatch orderReq : orderReq(X) 

//to add
Dispatch serveDrink : serveDrink(X)
  
//terza immagine  
Dispatch ready : ready(X) 

//interazione richiesta uscita client  
Dispatch exitReq : exitReq(X)

//interazione pagamento client
Request  collect : collect(X) 
Reply    payment : payment(X)


//interazione col planner
Dispatch doMove     : doMove(V)
Request  movetoCell : movetoCell(X,Y)
Reply    atcell     : atcell(X,Y)

//interazione col basicrobot
Dispatch cmd       	: cmd(MOVE)    
Request step : step(TIME)
Reply stepdone : stepdone(X)
Reply stepfail : stepfail(X)

//auto-messaggi
Dispatch moveTo : moveTo(X)
Dispatch readyToTakeOrder : readyToTakeOrder(X)
Dispatch listenRequests : listenRequests(X)
Dispatch pay : pay(X)

Dispatch goEntranceDoor : goEntranceDoor(X)

//interazioni resource model
Dispatch newClient : newClient(X)
Dispatch taskUpdate : taskUpdate(X)
Request askWhere : askWhere(X)
Reply location : location(X,Y)
Event waiterTaskChangedEvent : waiterTaskChangedEvent(X,T)
Event waitingTimeEvent : waitingTimeEvent(X)
Event newOrderEvent : newOrderEvent(X)
Event orderReadyEvent : orderReadyEvent(X)
Event robotCurrentPosition : robotCurrentPosition(X,Y)





Context ctxtearoom ip [ host= "localhost"   port= 8010 ] 
Context ctxbasicrobot ip [ host= "127.0.0.1" port= 8070]

ExternalQActor basicrobot context ctxbasicrobot



QActor resourcemodel context ctxtearoom{
	State s0 initial{
		println("[RESOURCE MODEL] STARTING, I will be soon ready to listen to changes!")
		solve( consult("sysRules.pl")	 ) 
		solve(consult("tearoomkb.pl"))
		discardMsg Off
	}
	Goto listenToChanges
	
	State listenToChanges{
		println("[RESOURCE MODEL] LISTENING...")
	} Transition t0 
			whenMsg newClient -> informChanges
			whenMsg taskUpdate -> informChanges
			whenMsg ready -> informChanges
			whenMsg orderReq -> informChanges
			whenEvent robotCurrentPosition -> informChanges
			whenRequest askWhere -> findLocation
	
	State informChanges{
		onMsg(newClient : newClient(X)) {
			println("[RESOURCE MODEL] New Client")
			solve(newClient)
			solve(teatable(X,available))
	 		ifSolved {
	 			println("[RESOURCE MODEL] A table is free!")
	 			[# 
				val X = getCurSol("X").toString()
				#]
				solve(replaceRule(teatable($X,_),teatable($X,busy)))
				println("[RESOURCE MODEL] Waiter task updated: reachEntranceDoor")
				solve(replaceRule(waiter(_),waiter(reachEntranceDoor)))
				emit waitingTimeEvent : waitingTimeEvent(0)
				emit waiterTaskChangedEvent : waiterTaskChangedEvent(reachEntranceDoor,$X)
	 		} else {
	 			println("[RESOURCE MODEL] All tables is busy")
				emit waitingTimeEvent : waitingTimeEvent(5000) //maxstaytime
		 	}		
		}
		onMsg(taskUpdate : taskUpdate(Task)) {
			[# val Task = payloadArg(0)#]
			println("[RESOURCE MODEL] Waiter task updated: $Task")
			solve(replaceRule(waiter(_),waiter($Task)))
			if [#Task == "returnHomeFromExit"#] {
				solve(exitClient)
			}
		}
		onMsg(orderReq : orderReq(T)){
			[# val T = payloadArg(0)#]
			println("[RESOURCE MODEL] New order for teatable$T")
			solve(replaceRule(servicedesk(_),servicedesk(preparing($T))))
			emit newOrderEvent : newOrderEvent($T)
		}
		onMsg(ready : ready(T)){
			[# val T = payloadArg(0)#]
			println("[RESOURCE MODEL] Order is ready for teatable$T")
			solve(replaceRule(servicedesk(_),servicedesk(ready($T))))
			solve(replaceRule(waiter(_),waiter(collectingDrink)))
			emit waiterTaskChangedEvent : waiterTaskChangedEvent(collectingDrink,$T)
		}
		onMsg(robotCurrentPosition : robotCurrentPosition(X,Y)) {
			[# 
				val X = payloadArg(0)
				val Y = payloadArg(1)
			#]
			solve(replaceRule(currentWaiterPos(_,_),currentWaiterPos($X,$Y)))
		}
		
		solve(roomstate( waiter(S),currentWaiterPos(X,Y) , stateOfTeatables(T1,T2), servicedesk(D), totalNumberOfClients(NC), clientsInTheRoom(CR)))
		[# 	
			val S = getCurSol("S").toString()
			val X = getCurSol("X").toString()
			val Y = getCurSol("Y").toString()
			val T1 = getCurSol("T1").toString()
			val T2 = getCurSol("T2").toString()
			val D = getCurSol("D").toString()
			val NC = getCurSol("NC").toString()
			val CR = getCurSol("CR").toString()
			
			
			val JsonState : String = itunibo.formatter.formatterUtil.formatJson(S,X,Y,T1,T2,D,NC,CR)
		#]
		updateResource [# JsonState #]
		
	} Goto listenToChanges
	
	State findLocation {
		onMsg(askWhere : askWhere(X)){
			[# var Spot = payloadArg(0) #]
			println("[RESOURCE MODEL] Find location $Spot")
			solve(pos($Spot,X,Y))
			[# 
			val X = getCurSol("X").toString() 
		  	val Y = getCurSol("Y").toString()
			#]
			replyTo askWhere with location : location($X,$Y)
		}
	}Goto listenToChanges
}

QActor waiter context ctxtearoom{ 
	
	[# 
		var WhatImDoing = "nothing" 
	   	var Table = ""
	 #]
	
	State s0 initial{ 
		println("[WAITER] waiter is starting..I'm HOME!") 
		discardMsg Off
	} 
	Goto reqHandler
	
 	State reqHandler{
 		println("[WAITER] Waiting for a request!")
 	}
 	Transition t0 
 		whenMsg readyToOrder -> reachingClientToTakeOrder 
 		whenMsg exitReq -> exitClient
 		whenEvent waiterTaskChangedEvent -> handleChange
 		whenMsg moveTo -> movementHelper
 		
 	State handleChange {
 		onMsg(waiterTaskChangedEvent : waiterTaskChangedEvent(T,X)) {
 			[# WhatImDoing = payloadArg(0)#]
 			println("[WAITER] New task: $WhatImDoing")
 			if [# WhatImDoing == "reachEntranceDoor"#] {
 				[#Table = "teatable" + payloadArg(1)#]
 				forward waiter -m moveTo : moveTo(entrancedoor)
 			}
 			if [# WhatImDoing == "collectingDrink"#] {
 				forward waiter -m moveTo : moveTo(barman)
 			}
 		}
 	}Goto reqHandler 
	
	
	State reachingClientToTakeOrder{
		println("[WAITER] I'm collecting the order from the client")
		forward resourcemodel -m taskUpdate : taskUpdate(takingOrder)
		[# WhatImDoing = "takingOrder" #]
		forward waiter -m moveTo: moveTo($Table)
	}Goto reqHandler 
	
	State takingOrder {
		request clientsimulator -m take : take(1) 
	}Transition t0 whenReply order -> clientReady
	
	State clientReady {
		onMsg( order : order( ORDER ) ){
			
			forward resourcemodel -m orderReq : orderReq( $Table )
			//forward barman -m orderReq : orderReq( $payloadArg(0) )
		}
		println("[WAITER] I'm transmitting the order to the barman")
		[#WhatImDoing = "returnHome"#]
		forward waiter -m moveTo : moveTo(home)
	} 
	Goto reqHandler
	
	/*State collectingDrink {	
		//solve(replaceRule(whatImDoing(_),whatImDoing(collectingDrink))) 
		forward resourcemodel -m taskUpdate : taskUpdate(collectingDrink)
		[# WhatImDoing = "collectingDrink" #]
		forward waiter -m moveTo : moveTo(barman)
	}Goto reqHandler*/
	
	State servingDrinkToClient {
		println("[WAITER] Serving the drink")
		forward clientsimulator -m serveDrink : serveDrink(tea)
		[#WhatImDoing = "returnHome"#]
		forward waiter -m moveTo : moveTo(home)
	}
	Goto reqHandler
	
	State exitClient{
		println("[WAITER] Client requested to exit! Proceeding to the payment")
		forward resourcemodel -m taskUpdate : taskUpdate(exitClient)
		[# WhatImDoing = "exitClient" #]
		forward waiter -m moveTo : moveTo(teatable1)
	}
	Goto reqHandler
	
	State payment{
		println("[WAITER] Collecting the money!")
		request clientsimulator -m collect : collect(1)
	}
	Transition t0 whenReply payment -> handlePayment
	
	State handlePayment {
		onMsg(payment : payment( MONEY )){
			[# println("[WAITER] " + payloadArg(0) + " EUR collected! Have a nice day!") #]
		}
		[#WhatImDoing = "convoyExit"#]
		forward resourcemodel -m taskUpdate : taskUpdate(convoyExit)
		forward waiter -m moveTo : moveTo(exitdoor)
	}
	Goto reqHandler
	
	
	// Stati legati al movimento
	
	State movementHelper {
		onMsg(moveTo : moveTo(L)){
			[#val Location = payloadArg(0)#]
			request resourcemodel -m askWhere : askWhere($Location)
		}
		onMsg (location : location(X,Y)) {
			[# 
				val XT = payloadArg(0)
			   	val YT = payloadArg(1)			  
			 #]
			request planner -m movetoCell : movetoCell($XT,$YT)
		}
	}Transition t1 	whenReply location -> movementHelper
					whenReply atcell -> handleAtCell
					

	State handleAtCell {	
		onMsg(atcell : atcell(X,Y)){
			if [# WhatImDoing == "reachEntranceDoor" #] {
				delay 3000
				[# WhatImDoing = "convoyTable" #]
				forward resourcemodel -m taskUpdate : taskUpdate(convoyTable)
				forward waiter -m moveTo : moveTo($Table)
			} 
			if [# WhatImDoing == "convoyTable" #] {
				delay 3000
				forward resourcemodel -m taskUpdate : taskUpdate(returnHome)
				[# WhatImDoing = "returnHome" #]
				forward waiter -m moveTo : moveTo(home)
			}
			if [# WhatImDoing == "returnHome" #] {
				delay 3000
				forward resourcemodel -m taskUpdate : taskUpdate(nothing)
				[# WhatImDoing = "nothing" #]	
				forward waiter -m listenRequests : listenRequests(A)
			}
			if [# WhatImDoing == "takingOrder"#] {
				delay 3000
				forward waiter -m readyToTakeOrder : readyToTakeOrder(A)
			}
			if [# WhatImDoing == "collectingDrink"#] {
				delay 3000
				forward resourcemodel -m taskUpdate : taskUpdate(bringingDrinkToClient)
				[# WhatImDoing = "bringingDrinkToClient" #]
				forward waiter -m moveTo : moveTo($Table)
			}
			if [# WhatImDoing == "bringingDrinkToClient" #] {
				delay 3000
				forward resourcemodel -m taskUpdate : taskUpdate(servingDrinkToClient)
				[# WhatImDoing = "servingDrinkToClient" #]
				forward waiter -m serveDrink : serveDrink(A)
			}
			if [# WhatImDoing == "exitClient" #] {
				delay 3000
				forward waiter -m pay : pay(A)
			}
			if [# WhatImDoing == "convoyExit" #] {
				delay 3000
				forward resourcemodel -m taskUpdate : taskUpdate(returnHomeFromExit)
				[# WhatImDoing = "returnHome" #]
				forward waiter -m moveTo : moveTo(home)
			} 
			
		}
	}	Transition t1 	whenMsg moveTo -> movementHelper  
						whenMsg readyToTakeOrder -> takingOrder
						whenMsg serveDrink -> servingDrinkToClient
						whenMsg pay -> payment
						whenMsg listenRequests -> reqHandler
						
	
}





/*
 * excutes a plan without 'interruption'
 */
QActor planner context ctxtearoom{  
[#
	var XT = "0"
	var YT = "0"
	var CurrentPlannedMove = ""
	var StepTime    	   = 100L
#]
	State s0 initial {	     
		//println("&&&  insensitivewalker STARTED")
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.plannerUtil.loadRoomMap( "teaRoomExplored" )
		discardMsg Off
	}	
	Transition t0 whenRequest movetoCell -> walk
	
	
	State walk{
		onMsg( movetoCell : movetoCell(X,Y) ){
			[# XT = payloadArg(0)
			   YT = payloadArg(1)			  
			 #]
			println("[PLANNER] MOVING to ($XT,$YT)")
			run itunibo.planner.plannerUtil.planForGoal("$XT","$YT")
		}
	}
	Goto execPlannedMoves
	
	
	State execPlannedMoves{ 
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		if [# CurrentPlannedMove.length > 0 # ]{
 			forward planner -m doMove : doMove($CurrentPlannedMove)
 		}else{
	     	println("[PLANNER] POINT ($XT,$YT) REACHED")
	     	replyTo movetoCell with atcell : atcell($XT,$YT) 			
 		}
 	}
 	Transition t0 whenMsg doMove  -> execTheMove
 				  whenRequest movetoCell and [# CurrentPlannedMove.length == 0 #]-> walk
 				  
 	State execTheMove{ 
  		onMsg( doMove : doMove(M) ){ 	
  			if [# payloadArg(0) == "w" #] {
  				request basicrobot -m step : step(370)
  			} else {
  				forward basicrobot -m cmd : cmd($payloadArg(0))
  				delay 500	
  			}
  		}
  		[# 
  			val move = payloadArg(0)
  			itunibo.planner.plannerUtil.updateMap(move,"")
  		#]		 			
 	 } 
     Goto execPlannedMoves if [# payloadArg(0) != "w" #] else waitStepDoneFail
     
     State waitStepDoneFail {
     } Transition t1 	whenReply stepdone -> updateCurrentPos
     					whenReply stepfail -> updateCurrentPos
     					
     State updateCurrentPos {
     	[# 
     		val X = itunibo.planner.plannerUtil.getPosX()
     		val Y = itunibo.planner.plannerUtil.getPosY()
     	#]
     	emit robotCurrentPosition : robotCurrentPosition($X,$Y)
     }Goto execPlannedMoves
     
 }
 



QActor smartbell context ctxtearoom{  
	[#  
		var temperature     = 37
	#]   
	  
	State s0 initial {	     
 		discardMsg Off
 	} 
	Goto  waitingForClient  
	
	State waitingForClient{
		println("[SMARTBELL] Waiting for a new client...")
 	} 
	Transition t0 whenRequest notify      -> checkTemp

	State checkTemp{ 
 		println("[SMARTBELL] Checking your temperature...")
 		/*[# 
 			val randomNumber = Math.random()
 			if  (randomNumber >= 0.7)
 				temperature = 39.0
 			else
 				temperature = 37.0		
 		#]*/
 	}
 	Goto badTemp if [# temperature > 37.5 #] else goodTemp
 
 	State badTemp{   
		println("[SMARTBELL] You should go to the hospital! ")
   		replyTo notify with tempResult : tempResult(no)
  	}
	Goto waitingForClient
	
	State goodTemp{   
		println("[SMARTBELL] Your temperature is ok ")
   		replyTo notify with tempResult : tempResult(yes)
  	}
	Goto waiterInfo
 	
 	State waiterInfo {  
 		println("[SMARTBELL] Checking table situation... ")
 		forward resourcemodel -m newClient : newClient(0)
 	}
    Transition t1 	whenEvent waitingTimeEvent -> informClient
    				
 	
 	State informClient{
 		onMsg(waitingTimeEvent : waitingTimeEvent(X)){
  			if [# payloadArg(0).toDouble() == 0.0 	#] {
  				println("[SMARTBELL] A waiter is coming... ")
  				forward clientsimulator -m accept : accept(enter)
  			} else {
  				println("[SMARTBELL] You have to wait... ")
  				forward clientsimulator -m inform : inform($payloadArg(0))
  			}
  		}
 	}   
 	Goto waitingForClient 
 	
}

QActor barman context ctxtearoom{  
	
	[#var Table = ""#]
	  	  
	State s0 initial {	     
 		discardMsg Off
 	} 
	Goto  waitingForOrder 
	
	State waitingForOrder{
		println("[BARMAN] Waiting for a new order...")
 	} 
	Transition t0 whenEvent newOrderEvent -> makeTea

	State makeTea{ 
		onMsg(newOrderEvent : newOrderEvent(T)) {
			[#Table = payloadArg(0)#]
	 		println("[BARMAN] Making some delicious tea...")
	 		delay 30000
 		}
 	}
 	Goto teaReady
 
 	State teaReady{   
		println("[BARMAN] The tea is ready!")
   		forward resourcemodel -m ready : ready($Table)
  	}
	Goto waitingForOrder
		 	
} 

QActor clientsimulator context ctxtearoom {
	[# var tempResult = "no"	#]
	State init initial {
		println("[CLIENT] Client STARTED")
		discardMsg Off
		delay 10000
	}
	Goto askToEnter
	
	State askToEnter {
		println("[CLIENT] Knock Knock, I'm here")
		request smartbell -m notify : notify
	}
	Transition t0 whenReply tempResult -> handleReply
	
	
	State handleReply {
		onMsg(tempResult : tempResult(RES)){
			[# tempResult = payloadArg(0) #]
		}
	}Goto waitToEnter if [# tempResult == "yes" #] else exit
	
	State waitToEnter {
	} 
	Transition t1 	whenMsg inform -> wait
					whenMsg accept -> enter
	
	
	State wait {
		println("[CLIENT] I have to wait")
		onMsg(inform : inform(TIME)){
			[# var Time = payloadArg(0).toLong() #]
			delayVar Time
		}
	}
	Goto enter
	
	State enter {
		println("[CLIENT] Choosing a drink")
		delay 50000 // simulate going to table and choosing a drink
		forward waiter -m readyToOrder : readyToOrder(1)
	}
	Transition t0 whenRequest take -> makeOrder
	
	State makeOrder {
		println("[CLIENT] A Na-tea-li please")
		replyTo take with order	: order(tea)
	}
	// qua bisogna fare una transition, devo aspettare di ricevere l'ordine
	Transition t0 whenMsg serveDrink -> drink
	
	State drink {
		println("[CLIENT] *sip sip* Delicious tea")
		delay 10000
	}Goto askToPay
	
	State askToPay {
		println("[CLIENT] I want to pay")
		forward waiter -m 	exitReq	: exitReq(1)
	}Transition t0 whenRequest collect -> pay
	
	State pay {
		println("[CLIENT] Paying")
		replyTo collect with payment : payment(10)
	}Goto exit
	
	State exit {
		println("[CLIENT] Client EXIT Byeeee!")
		terminate 1
	}
	
}


 