/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var WhatImDoing = "nothing" 
			   	var Table = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[WAITER] waiter is starting..I'm HOME!")
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("reqHandler") { //this:State
					action { //it:State
						println("[WAITER] Waiting for a request!")
					}
					 transition(edgeName="t06",targetState="reachingClientToTakeOrder",cond=whenDispatch("readyToOrder"))
					transition(edgeName="t07",targetState="exitClient",cond=whenDispatch("exitReq"))
					transition(edgeName="t08",targetState="handleChange",cond=whenEvent("waiterTaskChangedEvent"))
					transition(edgeName="t09",targetState="movementHelper",cond=whenDispatch("moveTo"))
				}	 
				state("handleChange") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("waiterTaskChangedEvent(X,T)"), Term.createTerm("waiterTaskChangedEvent(T,X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 WhatImDoing = payloadArg(0) 
								println("[WAITER] New task: $WhatImDoing")
								if(  WhatImDoing == "reachEntranceDoor" 
								 ){Table = "teatable" + payloadArg(1) 
								forward("moveTo", "moveTo(entrancedoor)" ,"waiter" ) 
								}
								if(  WhatImDoing == "collectingDrink" 
								 ){forward("moveTo", "moveTo(barman)" ,"waiter" ) 
								}
						}
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("reachingClientToTakeOrder") { //this:State
					action { //it:State
						println("[WAITER] I'm collecting the order from the client")
						forward("taskUpdate", "taskUpdate(takingOrder)" ,"resourcemodel" ) 
						 WhatImDoing = "takingOrder"  
						forward("moveTo", "moveTo($Table)" ,"waiter" ) 
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("takingOrder") { //this:State
					action { //it:State
						request("take", "take(1)" ,"clientsimulator" )  
					}
					 transition(edgeName="t010",targetState="clientReady",cond=whenReply("order"))
				}	 
				state("clientReady") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("order(X)"), Term.createTerm("order(ORDER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("orderReq", "orderReq($Table)" ,"resourcemodel" ) 
						}
						println("[WAITER] I'm transmitting the order to the barman")
						WhatImDoing = "returnHome" 
						forward("moveTo", "moveTo(home)" ,"waiter" ) 
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("servingDrinkToClient") { //this:State
					action { //it:State
						println("[WAITER] Serving the drink")
						forward("serveDrink", "serveDrink(tea)" ,"clientsimulator" ) 
						WhatImDoing = "returnHome" 
						forward("moveTo", "moveTo(home)" ,"waiter" ) 
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("exitClient") { //this:State
					action { //it:State
						println("[WAITER] Client requested to exit! Proceeding to the payment")
						forward("taskUpdate", "taskUpdate(exitClient)" ,"resourcemodel" ) 
						 WhatImDoing = "exitClient"  
						forward("moveTo", "moveTo(teatable1)" ,"waiter" ) 
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("payment") { //this:State
					action { //it:State
						println("[WAITER] Collecting the money!")
						request("collect", "collect(1)" ,"clientsimulator" )  
					}
					 transition(edgeName="t011",targetState="handlePayment",cond=whenReply("payment"))
				}	 
				state("handlePayment") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("payment(X)"), Term.createTerm("payment(MONEY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 println("[WAITER] " + payloadArg(0) + " EUR collected! Have a nice day!")  
						}
						WhatImDoing = "convoyExit" 
						forward("taskUpdate", "taskUpdate(convoyExit)" ,"resourcemodel" ) 
						forward("moveTo", "moveTo(exitdoor)" ,"waiter" ) 
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("movementHelper") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveTo(X)"), Term.createTerm("moveTo(L)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Location = payloadArg(0) 
								request("askWhere", "askWhere($Location)" ,"resourcemodel" )  
						}
						if( checkMsgContent( Term.createTerm("location(X,Y)"), Term.createTerm("location(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val XT = payloadArg(0)
											   	val YT = payloadArg(1)			  
								request("movetoCell", "movetoCell($XT,$YT)" ,"planner" )  
						}
					}
					 transition(edgeName="t112",targetState="movementHelper",cond=whenReply("location"))
					transition(edgeName="t113",targetState="handleAtCell",cond=whenReply("atcell"))
				}	 
				state("handleAtCell") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("atcell(X,Y)"), Term.createTerm("atcell(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  WhatImDoing == "reachEntranceDoor"  
								 ){delay(3000) 
								 WhatImDoing = "convoyTable"  
								forward("taskUpdate", "taskUpdate(convoyTable)" ,"resourcemodel" ) 
								forward("moveTo", "moveTo($Table)" ,"waiter" ) 
								}
								if(  WhatImDoing == "convoyTable"  
								 ){delay(3000) 
								forward("taskUpdate", "taskUpdate(returnHome)" ,"resourcemodel" ) 
								 WhatImDoing = "returnHome"  
								forward("moveTo", "moveTo(home)" ,"waiter" ) 
								}
								if(  WhatImDoing == "returnHome"  
								 ){delay(3000) 
								forward("taskUpdate", "taskUpdate(nothing)" ,"resourcemodel" ) 
								 WhatImDoing = "nothing"  
								forward("listenRequests", "listenRequests(A)" ,"waiter" ) 
								}
								if(  WhatImDoing == "takingOrder" 
								 ){delay(3000) 
								forward("readyToTakeOrder", "readyToTakeOrder(A)" ,"waiter" ) 
								}
								if(  WhatImDoing == "collectingDrink" 
								 ){delay(3000) 
								forward("taskUpdate", "taskUpdate(bringingDrinkToClient)" ,"resourcemodel" ) 
								 WhatImDoing = "bringingDrinkToClient"  
								forward("moveTo", "moveTo($Table)" ,"waiter" ) 
								}
								if(  WhatImDoing == "bringingDrinkToClient"  
								 ){delay(3000) 
								forward("taskUpdate", "taskUpdate(servingDrinkToClient)" ,"resourcemodel" ) 
								 WhatImDoing = "servingDrinkToClient"  
								forward("serveDrink", "serveDrink(A)" ,"waiter" ) 
								}
								if(  WhatImDoing == "exitClient"  
								 ){delay(3000) 
								forward("pay", "pay(A)" ,"waiter" ) 
								}
								if(  WhatImDoing == "convoyExit"  
								 ){delay(3000) 
								forward("taskUpdate", "taskUpdate(returnHomeFromExit)" ,"resourcemodel" ) 
								 WhatImDoing = "returnHome"  
								forward("moveTo", "moveTo(home)" ,"waiter" ) 
								}
						}
					}
					 transition(edgeName="t114",targetState="movementHelper",cond=whenDispatch("moveTo"))
					transition(edgeName="t115",targetState="takingOrder",cond=whenDispatch("readyToTakeOrder"))
					transition(edgeName="t116",targetState="servingDrinkToClient",cond=whenDispatch("serveDrink"))
					transition(edgeName="t117",targetState="payment",cond=whenDispatch("pay"))
					transition(edgeName="t118",targetState="reqHandler",cond=whenDispatch("listenRequests"))
				}	 
			}
		}
}
