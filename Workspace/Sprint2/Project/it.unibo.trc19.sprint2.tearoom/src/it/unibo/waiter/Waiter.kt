/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var WhatImDoing = "athome" 
				var Table = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[WAITER] waiter is starting..I'm HOME!")
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("reqHandler") { //this:State
					action { //it:State
						println("[WAITER] Waiting for a request!")
					}
					 transition(edgeName="t09",targetState="handleChange",cond=whenEvent("waiterTaskChangedEvent"))
					transition(edgeName="t010",targetState="movementHelper",cond=whenDispatch("moveTo"))
				}	 
				state("handleChange") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("waiterTaskChangedEvent(X,T)"), Term.createTerm("waiterTaskChangedEvent(T,X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 WhatImDoing = payloadArg(0) 
								println("[WAITER] New task: $WhatImDoing")
								
											when(WhatImDoing) {
												"reachEntranceDoor" -> { 
								Table = payloadArg(1) 
								forward("moveTo", "moveTo(entrancedoor)" ,"waiter" ) 
								}
												"convoyTable" -> { 
								forward("moveTo", "moveTo(teatable1)" ,"waiter" ) 
								}
												"takingOrder" -> { 
								forward("moveTo", "moveTo(teatable1)" ,"waiter" ) 
								}
												"collectingDrink" -> { 
								forward("moveTo", "moveTo(barman)" ,"waiter" ) 
								}
												"bringingDrinkToClient" -> { 
								forward("moveTo", "moveTo(teatable1)" ,"waiter" ) 
								}
												"collectingPayment" -> { 
								forward("moveTo", "moveTo(teatable1)" ,"waiter" ) 
								}
												"convoyExit" -> { 
								forward("moveTo", "moveTo(exitdoor)" ,"waiter" ) 
								}
												"returnHome" -> { 
								forward("moveTo", "moveTo(home)" ,"waiter" ) 
								}	
												"sanitizing" -> { 
								Table = payloadArg(1) 
								forward("moveTo", "moveTo($Table)" ,"waiter" ) 
								}
									
												"stepAhead" -> { 
								forward("doMove", "doMove(w)" ,"planner" ) 
								}
												"turnLeft" -> { 
								forward("doMove", "doMove(a)" ,"planner" ) 
								}
												"turnRight" -> { 
								forward("doMove", "doMove(d)" ,"planner" ) 
								}
								 			} 
						}
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("takingOrder") { //this:State
					action { //it:State
						delay(5000) 
						request("take", "take(1)" ,"clientsimulator" )  
					}
					 transition(edgeName="t011",targetState="clientReady",cond=whenReply("order"))
				}	 
				state("clientReady") { //this:State
					action { //it:State
						forward("orderReq", "orderReq(1)" ,"resourcemodel" ) 
						println("[WAITER] I'm transmitting the order to the barman")
						forward("taskDone", "taskDone($WhatImDoing,0)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("servingDrinkToClient") { //this:State
					action { //it:State
						println("[WAITER] Serving the drink")
						forward("serveDrink", "serveDrink(tea)" ,"clientsimulator" ) 
						delay(5000) 
						forward("taskDone", "taskDone($WhatImDoing,0)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("payment") { //this:State
					action { //it:State
						println("[WAITER] Collecting the money!")
						request("collect", "collect(1)" ,"clientsimulator" )  
					}
					 transition(edgeName="t012",targetState="handlePayment",cond=whenReply("payment"))
				}	 
				state("handlePayment") { //this:State
					action { //it:State
						delay(5000) 
						if( checkMsgContent( Term.createTerm("payment(X)"), Term.createTerm("payment(MONEY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 println("[WAITER] " + payloadArg(0) + " EUR collected! Have a nice day!")  
						}
						forward("taskDone", "taskDone($WhatImDoing,0)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("cleaningTable") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cleanTable(T)"), Term.createTerm("cleanTable(Table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Table = payloadArg(0) 
								println("[WAITER] Cleaning $Table!")
								delay(5000) 
								forward("taskDone", "taskDone($WhatImDoing,$Table)" ,"resourcemodel" ) 
						}
					}
					 transition( edgeName="goto",targetState="reqHandler", cond=doswitch() )
				}	 
				state("movementHelper") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveTo(X)"), Term.createTerm("moveTo(L)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val Location = payloadArg(0) 
								request("askWhere", "askWhere($Location)" ,"resourcemodel" )  
						}
						if( checkMsgContent( Term.createTerm("location(X,Y)"), Term.createTerm("location(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val XT = payloadArg(0)
											   	val YT = payloadArg(1)			  
								request("movetoCell", "movetoCell($XT,$YT)" ,"planner" )  
						}
					}
					 transition(edgeName="t113",targetState="movementHelper",cond=whenReply("location"))
					transition(edgeName="t114",targetState="handleAtCell",cond=whenReply("atcell"))
				}	 
				state("handleAtCell") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("atcell(X,Y)"), Term.createTerm("atcell(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 when(WhatImDoing) {
												"takingOrder" ->  {
								forward("readyToTakeOrder", "readyToTakeOrder(A)" ,"waiter" ) 
								 } 
												"bringingDrinkToClient" ->  {
								forward("serveDrink", "serveDrink(A)" ,"waiter" ) 
								 } 
												"collectingPayment" ->  {
								forward("pay", "pay(A)" ,"waiter" ) 
								 } 
												"sanitizing" ->  {
								forward("cleanTable", "cleanTable(teatable1)" ,"waiter" ) 
								}
												else -> {
								forward("listenRequests", "listenRequests(1)" ,"waiter" ) 
								forward("taskDone", "taskDone($WhatImDoing,0)" ,"resourcemodel" ) 
								}
											} 
						}
					}
					 transition(edgeName="t115",targetState="movementHelper",cond=whenDispatch("moveTo"))
					transition(edgeName="t116",targetState="takingOrder",cond=whenDispatch("readyToTakeOrder"))
					transition(edgeName="t117",targetState="servingDrinkToClient",cond=whenDispatch("serveDrink"))
					transition(edgeName="t118",targetState="payment",cond=whenDispatch("pay"))
					transition(edgeName="t119",targetState="cleaningTable",cond=whenDispatch("cleanTable"))
					transition(edgeName="t120",targetState="reqHandler",cond=whenDispatch("listenRequests"))
				}	 
			}
		}
}
