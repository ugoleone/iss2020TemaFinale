/* Generated by AN DISI Unibo */ 
package it.unibo.resourcemodel

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Resourcemodel ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var TeatableNumber = ""
				var Teatable = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[RESOURCE MODEL] STARTING, I will be soon ready to listen to changes!")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('tearoomkb.pl')","") //set resVar	
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
				state("listenToChanges") { //this:State
					action { //it:State
						println("[RESOURCE MODEL] LISTENING...")
					}
					 transition(edgeName="t00",targetState="informChanges",cond=whenDispatch("newClient"))
					transition(edgeName="t01",targetState="informChanges",cond=whenDispatch("ready"))
					transition(edgeName="t02",targetState="informChanges",cond=whenDispatch("orderReq"))
					transition(edgeName="t03",targetState="informChanges",cond=whenDispatch("waiterCurrentPositionDirection"))
					transition(edgeName="t04",targetState="informChanges",cond=whenDispatch("updateClientState"))
					transition(edgeName="t05",targetState="informChanges",cond=whenDispatch("taskDone"))
					transition(edgeName="t06",targetState="findLocation",cond=whenRequest("askWhere"))
					transition(edgeName="t07",targetState="informChanges",cond=whenDispatch("move"))
					transition(edgeName="t08",targetState="informChanges",cond=whenDispatch("state"))
				}	 
				state("informChanges") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("newClient(X)"), Term.createTerm("newClient(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[RESOURCE MODEL] New Client")
								solve("newClient(ID)","") //set resVar	
								
												val ID = getCurSol("ID").toString()
								solve("teatable(TeatableNumber,available)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("[RESOURCE MODEL] A table is free!")
								 
												TeatableNumber = getCurSol("TeatableNumber").toString()
								solve("replaceRule(teatable($TeatableNumber,_),teatable($TeatableNumber,busy))","") //set resVar	
								solve("assignTable($TeatableNumber,$ID)","") //set resVar	
								solve("replaceRule(client($ID,_),client($ID,entering))","") //set resVar	
								println("[RESOURCE MODEL] Waiter task updated: reachEntranceDoor")
								solve("replaceRule(waiter(_),waiter(reachEntranceDoor))","") //set resVar	
								emit("waitingTimeEvent", "waitingTimeEvent($ID,0)" ) 
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(reachEntranceDoor,$TeatableNumber)" ) 
								}
								else
								{println("[RESOURCE MODEL] All tables is busy")
								emit("waitingTimeEvent", "waitingTimeEvent(5000)" ) 
								}
						}
						if( checkMsgContent( Term.createTerm("updateClientState(ID,R)"), Term.createTerm("updateClientState(ID,R)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val ID = payloadArg(0)
												val R = payloadArg(1)
												when(R) {
													"ordering" -> { 
								solve("replaceRule(client($ID,_),client($ID,ordering))","") //set resVar	
								solve("replaceRule(waiter(_),waiter(takingOrder))","") //set resVar	
								solve("teatableClientID(TeatableNumber,$ID)","") //set resVar	
								 TeatableNumber = getCurSol("TeatableNumber").toString()  
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(takingOrder,$TeatableNumber)" ) 
								}
													"paying" -> { 
								solve("replaceRule(client($ID,_),client($ID,paying))","") //set resVar	
								solve("replaceRule(waiter(_),waiter(collectingPayment))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(collectingPayment,0)" ) 
								}
													"exiting" -> { 
								solve("replaceRule(client($ID,_),client($ID,exiting))","") //set resVar	
								solve("roomstate(waiter(S),currentWaiterPosDir(Y,X,D),stateOfTeatables(T1,T2),servicedesk(SD),getClientsState(CS),teaServed(TS),totalNumberOfClients(NC),clientsInTheRoom(CR))","") //set resVar	
								 	
															val S = getCurSol("S").toString()
															val X = getCurSol("X").toString()
															val Y = getCurSol("Y").toString()
															val D = getCurSol("D").toString()
															val T1 = getCurSol("T1").toString()
															val T2 = getCurSol("T2").toString()
															val SD = getCurSol("SD").toString()
															val CS = getCurSol("CS").toString()
															val TS = getCurSol("TS").toString()
															val NC = getCurSol("NC").toString()
															val CR = getCurSol("CR").toString()
															
															
															val JsonState : String = itunibo.formatter.formatterUtil.formatJson(S,X,Y,D,T1,T2,SD,CS,TS,NC,CR)
								updateResourceRep( JsonState  
								)
								solve("exitClient($ID)","") //set resVar	
								}
												}
						}
						if( checkMsgContent( Term.createTerm("orderReq(X)"), Term.createTerm("orderReq(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val ID = payloadArg(0) 
								println("[RESOURCE MODEL] New order for client $ID")
								solve("replaceRule(servicedesk(_),servicedesk(preparing($ID)))","") //set resVar	
								emit("newOrderEvent", "newOrderEvent($ID)" ) 
						}
						if( checkMsgContent( Term.createTerm("ready(X)"), Term.createTerm("ready(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val ID = payloadArg(0) 
								println("[RESOURCE MODEL] Order is ready for client $ID")
								solve("replaceRule(servicedesk(_),servicedesk(ready($ID)))","") //set resVar	
								solve("teatableClientID(TeatableNumber,$ID)","") //set resVar	
								 TeatableNumber = getCurSol("TeatableNumber").toString()  
								solve("replaceRule(waiter(_),waiter(collectingDrink))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(collectingDrink,$TeatableNumber)" ) 
						}
						if( checkMsgContent( Term.createTerm("waiterCurrentPositionDirection(X,Y,D)"), Term.createTerm("waiterCurrentPositionDirection(X,Y,D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val X = payloadArg(0)
												val Y = payloadArg(1)
												val D = payloadArg(2)
								solve("replaceRule(currentWaiterPosDir(_,_,_),currentWaiterPosDir($X,$Y,$D))","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("taskDone(T,X)"), Term.createTerm("taskDone(T,X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Task = payloadArg(0)  
								 when(Task) {
												"reachEntranceDoor" ->  {  
								solve("replaceRule(waiter(_),waiter(convoyTable))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(convoyTable,0)" ) 
								 } 
												"convoyTable" ->  {
								solve("replaceRule(waiter(_),waiter(returnHome))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								 } 
												"returnHome" ->  {
								solve("replaceRule(waiter(_),waiter(athome))","") //set resVar	
								solve("teatable(TeatableNumber,dirty)","") //set resVar	
								if( currentSolution.isSuccess() ) {solve("replaceRule(waiter(_),waiter(sanitizing))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(sanitizing,$TeatableNumber)" ) 
								}
								else
								{}
								 } 
												"takingOrder" ->  {
								solve("replaceRule(waiter(_),waiter(returnHome))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								 } 
												"collectingDrink" ->  {
								solve("replaceRule(servicedesk(_),servicedesk(idle))","") //set resVar	
								solve("replaceRule(waiter(_),waiter(bringingDrinkToClient))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(bringingDrinkToClient,0)" ) 
								 } 
												"bringingDrinkToClient" ->  {
								solve("replaceRule(waiter(_),waiter(returnHome))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								solve("serveTea","") //set resVar	
								 } 
												"collectingPayment" ->  {
								solve("replaceRule(teatable(1,_),teatable(1,dirty))","") //set resVar	
								solve("replaceRule(waiter(_),waiter(convoyExit))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(convoyExit,0)" ) 
								 } 
												"convoyExit" ->  {
								solve("replaceRule(waiter(_),waiter(returnHome))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								 } 
												"sanitizing" ->  {
								
												TeatableNumber = payloadArg(1)
								solve("replaceRule(teatable($TeatableNumber,_),teatable($TeatableNumber,available))","") //set resVar	
								solve("replaceRule(waiter(_),waiter(returnHome))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								}
											} 
						}
						if( checkMsgContent( Term.createTerm("move(X)"), Term.createTerm("move(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Task = payloadArg(0)
												when(Task) {
													"stepAhead" -> { 
								solve("replaceRule(waiter(_),waiter(stepAhead))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(stepAhead,0)" ) 
								}
													"turnLeft" -> { 
								solve("replaceRule(waiter(_),waiter(turnLeft))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(turnLeft,0)" ) 
								}
													"turnRight" -> { 
								solve("replaceRule(waiter(_),waiter(turnRight))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(turnRight,0)" ) 
								}
													"returnHome" -> { 
								solve("replaceRule(waiter(_),waiter(returnHome))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								}
												}
						}
						solve("roomstate(waiter(S),currentWaiterPosDir(Y,X,D),stateOfTeatables(T1,T2),servicedesk(SD),getClientsState(CS),teaServed(TS),totalNumberOfClients(NC),clientsInTheRoom(CR))","") //set resVar	
						 	
									val S = getCurSol("S").toString()
									val X = getCurSol("X").toString()
									val Y = getCurSol("Y").toString()
									val D = getCurSol("D").toString()
									val T1 = getCurSol("T1").toString()
									val T2 = getCurSol("T2").toString()
									val SD = getCurSol("SD").toString()
									val CS = getCurSol("CS").toString()
									val TS = getCurSol("TS").toString()
									val NC = getCurSol("NC").toString()
									val CR = getCurSol("CR").toString()
									
									
									val JsonState : String = itunibo.formatter.formatterUtil.formatJson(S,X,Y,D,T1,T2,SD,CS,TS,NC,CR)
						updateResourceRep( JsonState  
						)
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
				state("findLocation") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("askWhere(X)"), Term.createTerm("askWhere(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Spot = payloadArg(0)  
								println("[RESOURCE MODEL] Find location $Spot")
								solve("pos($Spot,X,Y)","") //set resVar	
								 
											val X = getCurSol("X").toString() 
										  	val Y = getCurSol("Y").toString()
								answer("askWhere", "location", "location($X,$Y)"   )  
						}
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
			}
		}
}
