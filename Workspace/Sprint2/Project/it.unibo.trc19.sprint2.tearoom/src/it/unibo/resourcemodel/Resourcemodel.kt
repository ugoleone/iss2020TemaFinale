/* Generated by AN DISI Unibo */ 
package it.unibo.resourcemodel

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Resourcemodel ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[RESOURCE MODEL] STARTING, I will be soon ready to listen to changes!")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('tearoomkb.pl')","") //set resVar	
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
				state("listenToChanges") { //this:State
					action { //it:State
						println("[RESOURCE MODEL] LISTENING...")
					}
					 transition(edgeName="t00",targetState="informChanges",cond=whenDispatch("newClient"))
					transition(edgeName="t01",targetState="informChanges",cond=whenDispatch("taskUpdate"))
					transition(edgeName="t02",targetState="informChanges",cond=whenDispatch("ready"))
					transition(edgeName="t03",targetState="informChanges",cond=whenDispatch("orderReq"))
					transition(edgeName="t04",targetState="findLocation",cond=whenRequest("askWhere"))
				}	 
				state("informChanges") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("newClient(X)"), Term.createTerm("newClient(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[RESOURCE MODEL] New Client")
								solve("totalNumberOfClient(N)","") //set resVar	
								 
											var N = getCurSol("N").toString().toInt()
											N = N + 1
								println("[RESOURCE MODEL] New total number of client $N")
								solve("replaceRule(totalNumberOfClient(_),totalNumberOfClient($N))","") //set resVar	
								solve("teatable(X,available)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("[RESOURCE MODEL] A table is free!")
								 
												val X = getCurSol("X") 
								solve("replaceRule(teatable($X,_),teatable($X,busy))","") //set resVar	
								println("[RESOURCE MODEL] Waiter task updated: reachEntranceDoor")
								solve("replaceRule(waiter(_),waiter(reachEntranceDoor))","") //set resVar	
								emit("waitingTimeEvent", "waitingTimeEvent(0)" ) 
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(reachEntranceDoor,$X)" ) 
								}
								else
								{println("[RESOURCE MODEL] All tables is busy")
								emit("waitingTimeEvent", "waitingTimeEvent(5000)" ) 
								}
						}
						if( checkMsgContent( Term.createTerm("taskUpdate(X)"), Term.createTerm("taskUpdate(Task)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Task = payloadArg(0) 
								println("[RESOURCE MODEL] Waiter task updated: $Task")
								solve("replaceRule(waiter(_),waiter($Task))","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("orderReq(X)"), Term.createTerm("orderReq(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val T = payloadArg(0) 
								println("[RESOURCE MODEL] New order for teatable$T")
								solve("replaceRule(servicedesk(_),servicedesk(preparing($T)))","") //set resVar	
								emit("newOrderEvent", "newOrderEvent($T)" ) 
						}
						if( checkMsgContent( Term.createTerm("ready(X)"), Term.createTerm("ready(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val T = payloadArg(0) 
								println("[RESOURCE MODEL] Order is ready for teatable$T")
								solve("replaceRule(servicedesk(_),servicedesk(ready($T)))","") //set resVar	
								solve("replaceRule(waiter(_),waiter(collectingDrink))","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(collectingDrink,$T)" ) 
						}
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
				state("findLocation") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("askWhere(X)"), Term.createTerm("askWhere(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Spot = payloadArg(0)  
								println("[RESOURCE MODEL] Find location $Spot")
								solve("pos($Spot,X,Y)","") //set resVar	
								 
											val X = getCurSol("X") 
										  	val Y = getCurSol("Y") 
								answer("askWhere", "location", "location($X,$Y)"   )  
						}
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
			}
		}
}
