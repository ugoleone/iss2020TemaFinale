/* Generated by AN DISI Unibo */ 
package it.unibo.timersmanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Timersmanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="waitingRequests", cond=doswitch() )
				}	 
				state("waitingRequests") { //this:State
					action { //it:State
						println("[TIMER] Waiting for new requests")
					}
					 transition(edgeName="t043",targetState="timer",cond=whenDispatch("startTimer"))
				}	 
				state("timer") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("startTimer(A,M,P,T)"), Term.createTerm("startTimer(A,M,P,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var Actor = payloadArg(0)
												var Message = payloadArg(1)
												var Payload = payloadArg(2)
												var Time = payloadArg(3).toLong()
												
												scope.launch {
													delay(Time)
													forward("$Message", "$Message($Payload)" ,"$Actor" )		
												}
						}
					}
					 transition( edgeName="goto",targetState="waitingRequests", cond=doswitch() )
				}	 
			}
		}
}
