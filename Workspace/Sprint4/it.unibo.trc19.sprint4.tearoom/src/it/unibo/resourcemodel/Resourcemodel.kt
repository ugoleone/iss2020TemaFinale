/* Generated by AN DISI Unibo */ 
package it.unibo.resourcemodel

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Resourcemodel ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var TeatableNumber = ""
				var Teatable = ""
				var busy = false
				var ID = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("[RESOURCE MODEL] STARTING, I will be soon ready to listen to changes!")
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('tearoomkb.pl')","") //set resVar	
						discardMessages = false
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
				state("listenToChanges") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="informChanges",cond=whenDispatch("newClient"))
					transition(edgeName="t01",targetState="informChanges",cond=whenDispatch("ready"))
					transition(edgeName="t02",targetState="informChanges",cond=whenDispatch("orderReq"))
					transition(edgeName="t03",targetState="informChanges",cond=whenDispatch("waiterCurrentPositionDirection"))
					transition(edgeName="t04",targetState="informChanges",cond=whenDispatch("updateClientState"))
					transition(edgeName="t05",targetState="informChanges",cond=whenDispatch("taskDone"))
					transition(edgeName="t06",targetState="findLocation",cond=whenRequest("askWhere"))
					transition(edgeName="t07",targetState="informChanges",cond=whenDispatch("move"))
					transition(edgeName="t08",targetState="informChanges",cond=whenDispatch("state"))
					transition(edgeName="t09",targetState="returnClientState",cond=whenRequest("clientStateReq"))
					transition(edgeName="t010",targetState="informChanges",cond=whenDispatch("alarm"))
					transition(edgeName="t011",targetState="informChanges",cond=whenDispatch("unlockClient"))
					transition(edgeName="t012",targetState="informInterruption",cond=whenDispatch("cleaningInterrupted"))
				}	 
				state("informChanges") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("newClient(X)"), Term.createTerm("newClient(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("[RESOURCE MODEL] New Client")
								solve("newClient(ID)","") //set resVar	
								
												ID = getCurSol("ID").toString()
								solve("teatable(TeatableNumber,available,_,_)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("[RESOURCE MODEL] A table is free!")
								 
												TeatableNumber = getCurSol("TeatableNumber").toString()
								solve("reserveTable($TeatableNumber,$ID)","") //set resVar	
								solve("replaceRule(client($ID,_,L),client($ID,entering,L))","") //set resVar	
								println("[RESOURCE MODEL] Waiter task updated: reachEntranceDoor")
								emit("waitingTimeEvent", "waitingTimeEvent($ID,0)" ) 
								if( busy 
								 ){solve("addTask(reachEntranceDoor,$TeatableNumber)","") //set resVar	
								}
								else
								 { busy = true  
								 solve("updateWaiterTask(reachEntranceDoor)","") //set resVar	
								 emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(reachEntranceDoor,$TeatableNumber)" ) 
								 }
								}
								else
								{println("[RESOURCE MODEL] All tables are busy")
								solve("addWaitingClient($ID)","") //set resVar	
								emit("waitingTimeEvent", "waitingTimeEvent($ID,600000)" ) 
								}
						}
						if( checkMsgContent( Term.createTerm("updateClientState(ID,R)"), Term.createTerm("updateClientState(ID,CS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												ID = payloadArg(0)
												val CS = payloadArg(1)
												when(CS) {
													"ordering" -> { 
								solve("updateClientState($ID,$CS,true)","") //set resVar	
								solve("teatableClientID(TeatableNumber,$ID)","") //set resVar	
								 TeatableNumber = getCurSol("TeatableNumber").toString()  
								if( busy 
								 ){solve("addTask(takingOrder,$TeatableNumber)","") //set resVar	
								}
								else
								 { busy = true  
								 solve("updateWaiterTask(takingOrder)","") //set resVar	
								 emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(takingOrder,$TeatableNumber)" ) 
								 }
								}
													"waitingtea" -> { 
								solve("updateClientState($ID,$CS,true)","") //set resVar	
								}
													"drinking" -> { 
								solve("updateClientState($ID,$CS,false)","") //set resVar	
								if( busy 
								 ){solve("addTask(returnHome,0)","") //set resVar	
								}
								else
								 { busy = true  
								 solve("updateWaiterTask(returnHome)","") //set resVar	
								 emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								 }
								}
													"paying" -> { 
								solve("updateClientState($ID,$CS,true)","") //set resVar	
								solve("teatableClientID(T,$ID)","") //set resVar	
								 TeatableNumber = getCurSol("T").toString()  
								if( busy 
								 ){solve("addTask(collectingPayment,$TeatableNumber)","") //set resVar	
								}
								else
								 { busy = true  
								 solve("updateWaiterTask(collectingPayment)","") //set resVar	
								 emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(collectingPayment,$TeatableNumber)" ) 
								 }
								}
													"exiting" -> { 
								solve("updateClientState($ID,$CS,true)","") //set resVar	
								}
													"gone" -> { 
								solve("client($ID,CurrentState,_)","") //set resVar	
								 val OS = getCurSol("CurrentState").toString()  
								if(  OS == "waiting"  
								 ){solve("withdraw","") //set resVar	
								}
								solve("updateClientState($ID,$CS,true)","") //set resVar	
								solve("roomstate(waiter(S),currentWaiterPosDir(Y,X,D),stateOfTeatables(T1,T2),servicedesk(SD),orders(O),getClientsState(CS),teaServed(TS),totalNumberOfClients(NC),clientsInTheRoom(CR),withdraws(W))","") //set resVar	
								 	
															val S = getCurSol("S").toString()
															val X = getCurSol("X").toString()
															val Y = getCurSol("Y").toString()
															val D = getCurSol("D").toString()
															val T1 = getCurSol("T1").toString()
															val T2 = getCurSol("T2").toString()
															val SD = getCurSol("SD").toString()
															val O = getCurSol("O").toString()
															val CS = getCurSol("CS").toString()
															val TS = getCurSol("TS").toString()
															val NC = getCurSol("NC").toString()
															val CR = getCurSol("CR").toString()
															val W = getCurSol("W").toString()
															
															
															val JsonState : String = itunibo.formatter.formatterUtil.formatJson(S,X,Y,D,T1,T2,SD,O,CS,TS,NC,CR,W)
								updateResourceRep( JsonState  
								)
								solve("exitClient($ID)","") //set resVar	
								}
												}
						}
						if( checkMsgContent( Term.createTerm("orderReq(ID,X)"), Term.createTerm("orderReq(ID,O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												ID = payloadArg(0)
												val O = payloadArg(1)
								println("[RESOURCE MODEL] New order for client $ID")
								solve("updateBarmanState(preparing($ID,$O))","") //set resVar	
								solve("addOrder($ID,$O)","") //set resVar	
								emit("newOrderEvent", "newOrderEvent($ID)" ) 
						}
						if( checkMsgContent( Term.createTerm("ready(X)"), Term.createTerm("ready(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ID = payloadArg(0) 
								solve("client($ID,_,L)","") //set resVar	
								if( currentSolution.isSuccess() ) {println("[RESOURCE MODEL] Order is ready for client $ID")
								solve("updateBarmanState(ready($ID))","") //set resVar	
								solve("deleteOrder($ID,_)","") //set resVar	
								solve("teatableClientID(TeatableNumber,$ID)","") //set resVar	
								 TeatableNumber = getCurSol("TeatableNumber").toString()  
								if( busy 
								 ){solve("addTask(collectingDrink,$TeatableNumber)","") //set resVar	
								}
								else
								 { busy = true  
								 solve("updateWaiterTask(collectingDrink)","") //set resVar	
								 emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(collectingDrink,$TeatableNumber)" ) 
								 }
								}
								else
								{println("[RESOURCE MODEL] Order is ready for client $ID but is gone")
								solve("updateBarmanState(idle)","") //set resVar	
								solve("deleteOrder($ID,_)","") //set resVar	
								}
						}
						if( checkMsgContent( Term.createTerm("waiterCurrentPositionDirection(X,Y,D)"), Term.createTerm("waiterCurrentPositionDirection(X,Y,D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val X = payloadArg(0)
												val Y = payloadArg(1)
												val D = payloadArg(2)
								solve("updateWaiterPositionDirection($X,$Y,$D)","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("taskDone(T,X)"), Term.createTerm("taskDone(T,X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Task = payloadArg(0)  
								 when(Task) {
												"reachEntranceDoor" ->  {  
								solve("updateWaiterTask(convoyTable)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(convoyTable,0)" ) 
								 } 
												"convoyTable" ->  {
								 var TeatableNumber = payloadArg(1)  
								solve("teatableClientID($TeatableNumber,ID)","") //set resVar	
								 var ID = getCurSol("ID").toString()  
								solve("seatClient($TeatableNumber,$ID)","") //set resVar	
								forward("startTimer", "startTimer(0,resourcemodel,alarm,$ID,60000)" ,"timersmanager" ) 
								solve("getTask(T,P)","") //set resVar	
								if( currentSolution.isSuccess() ) { Task = getCurSol("T").toString() 
														var P = getCurSol("P").toString()
								solve("updateWaiterTask($Task)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent($Task,$P)" ) 
								}
								else
								{ busy = false  
								solve("updateWaiterTask(returnHome)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								}
								 } 
												"returnHome" ->  {
								solve("updateWaiterTask(athome)","") //set resVar	
								solve("getTask(T,P)","") //set resVar	
								if( currentSolution.isSuccess() ) { Task = getCurSol("T").toString() 
														var P = getCurSol("P").toString()
								solve("updateWaiterTask($Task)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent($Task,$P)" ) 
								}
								else
								{solve("teatable(TeatableNumber,dirty,RemainingTime,_)","") //set resVar	
								 busy = false  
								if( currentSolution.isSuccess() ) { 
															TeatableNumber = getCurSol("TeatableNumber").toString() 
															var RemainingTime = getCurSol("RemainingTime").toString()
															var Concat = "s" + TeatableNumber + "s" + RemainingTime
								solve("updateWaiterTask(sanitizing)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(sanitizing,$Concat)" ) 
								}
								else
								{ busy = false  
								}
								}
								 } 
												"takingOrder" ->  {
								solve("getTask(T,P)","") //set resVar	
								if( currentSolution.isSuccess() ) { Task = getCurSol("T").toString() 
														var P = getCurSol("P").toString()
								solve("updateWaiterTask($Task)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent($Task,$P)" ) 
								}
								else
								{ busy = false  
								solve("updateWaiterTask(returnHome)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								}
								 } 
												"collectingDrink" ->  {
								solve("updateBarmanState(idle)","") //set resVar	
								solve("updateWaiterTask(bringingDrinkToClient)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(bringingDrinkToClient,0)" ) 
								 } 
												"bringingDrinkToClient" ->  {
								solve("getTask(T,P)","") //set resVar	
								if( currentSolution.isSuccess() ) { Task = getCurSol("T").toString() 
														var P = getCurSol("P").toString()
								solve("updateWaiterTask($Task)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent($Task,$P)" ) 
								}
								else
								{ busy = false  
								solve("updateWaiterTask(returnHome)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								}
								solve("serveTea","") //set resVar	
								 } 
												"collectingPayment" ->  {
								solve("teatableClientID(T,${payloadArg(1)})","") //set resVar	
								 TeatableNumber = getCurSol("T").toString()  
								solve("updateWaiterTask(convoyExit)","") //set resVar	
								solve("freeTable($TeatableNumber)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(convoyExit,0)" ) 
								 } 
												"convoyExit" ->  {
								solve("replaceRule(client($ID,S,_),client($ID,S,false))","") //set resVar	
								solve("getTask(T,P)","") //set resVar	
								if( currentSolution.isSuccess() ) { Task = getCurSol("T").toString() 
														var P = getCurSol("P").toString()
								solve("updateWaiterTask($Task)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent($Task,$P)" ) 
								}
								else
								{ busy = false  
								solve("updateWaiterTask(returnHome)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								}
								 } 
												"sanitizing" ->  {
								
												TeatableNumber = payloadArg(1)
								solve("getWaitingClient(ID)","") //set resVar	
								if( currentSolution.isSuccess() ) { ID = getCurSol("ID").toString()  
								solve("reserveTable($TeatableNumber,$ID)","") //set resVar	
								solve("updateClientState($ID,entering,true)","") //set resVar	
								println("[RESOURCE MODEL] Waiter task updated: reachEntranceDoor")
								 busy = true  
								solve("updateWaiterTask(reachEntranceDoor)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(reachEntranceDoor,$TeatableNumber)" ) 
								}
								else
								{solve("tableCleaned($TeatableNumber)","") //set resVar	
								solve("getTask(T,P)","") //set resVar	
								if( currentSolution.isSuccess() ) { Task = getCurSol("T").toString() 
															var P = getCurSol("P").toString()
								solve("updateWaiterTask($Task)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent($Task,$P)" ) 
								}
								else
								{ busy = false  
								solve("updateWaiterTask(returnHome)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								}
								}
								}
												"forceExit" -> { 
								
													TeatableNumber = payloadArg(1)
								solve("freeTable($TeatableNumber)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(convoyExit,0)" ) 
								}
											} 
						}
						if( checkMsgContent( Term.createTerm("move(X)"), Term.createTerm("move(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Task = payloadArg(0)
												when(Task) {
													"stepAhead" -> { 
								solve("updateWaiterTask(stepAhead)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(stepAhead,0)" ) 
								}
													"turnLeft" -> { 
								solve("updateWaiterTask(turnLeft)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(turnLeft,0)" ) 
								}
													"turnRight" -> { 
								solve("updateWaiterTask(turnRight)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(turnRight,0)" ) 
								}
													"returnHome" -> { 
								 busy = false  
								solve("updateWaiterTask(returnHome)","") //set resVar	
								emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(returnHome,0)" ) 
								}
												}
						}
						if( checkMsgContent( Term.createTerm("alarm(ID)"), Term.createTerm("alarm(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var served = true 
												ID = payloadArg(0)
								solve("client($ID,ClientState,L)","") //set resVar	
								if( currentSolution.isSuccess() ) { var clientState = getCurSol("ClientState").toString()  
								if(  clientState != "paying" && clientState != "exiting" && clientState != "gone"  
								 ){solve("teatableClientID(T,$ID)","") //set resVar	
								 TeatableNumber = getCurSol("T").toString()  
								if( clientState == "ordering" || clientState == "entering" 
								 ){ served = false  
								}
								if( busy 
								 ){if( served 
								 ){solve("addTask(collectingPayment,$TeatableNumber)","") //set resVar	
								solve("replaceRule(client($ID,_,L),client($ID,paying,L))","") //set resVar	
								}
								else
								 {solve("addTask(forceExit,$TeatableNumber)","") //set resVar	
								 solve("replaceRule(client($ID,_,L),client($ID,exiting,L))","") //set resVar	
								 }
								}
								else
								 { busy = true  
								 if( served 
								  ){solve("updateClientState($ID,paying,true)","") //set resVar	
								 solve("updateWaiterTask(collectingPayment)","") //set resVar	
								 emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(collectingPayment,$TeatableNumber)" ) 
								 }
								 else
								  {solve("updateClientState($ID,exiting,true)","") //set resVar	
								  solve("updateWaiterTask(forceExit)","") //set resVar	
								  emit("waiterTaskChangedEvent", "waiterTaskChangedEvent(forceExit,$TeatableNumber)" ) 
								  }
								 }
								}
								}
								else
								{}
						}
						if( checkMsgContent( Term.createTerm("unlockClient(X)"), Term.createTerm("unlockClient(P)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TeatableNumber = payloadArg(0)  
								solve("teatableClientID($TeatableNumber,ID)","") //set resVar	
								 var ID = getCurSol("ID").toString()  
								solve("unlockClient($ID)","") //set resVar	
						}
						solve("roomstate(waiter(S),currentWaiterPosDir(Y,X,D),stateOfTeatables(T1,T2),servicedesk(SD),orders(O),getClientsState(CS),teaServed(TS),totalNumberOfClients(NC),clientsInTheRoom(CR),withdraws(W))","") //set resVar	
						 	
									val S = getCurSol("S").toString()
									val X = getCurSol("X").toString()
									val Y = getCurSol("Y").toString()
									val D = getCurSol("D").toString()
									val T1 = getCurSol("T1").toString()
									val T2 = getCurSol("T2").toString()
									val SD = getCurSol("SD").toString()
									val O = getCurSol("O").toString()
									val CS = getCurSol("CS").toString()
									val TS = getCurSol("TS").toString()
									val NC = getCurSol("NC").toString()
									val CR = getCurSol("CR").toString()
									val W = getCurSol("W").toString()
									
									
									val JsonState : String = itunibo.formatter.formatterUtil.formatJson(S,X,Y,D,T1,T2,SD,O,CS,TS,NC,CR,W)
						updateResourceRep( JsonState  
						)
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
				state("findLocation") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("askWhere(X)"), Term.createTerm("askWhere(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Spot = payloadArg(0)  
								println("[RESOURCE MODEL] Find location $Spot")
								solve("pos($Spot,X,Y)","") //set resVar	
								 
											val X = getCurSol("X").toString() 
										  	val Y = getCurSol("Y").toString()
								answer("askWhere", "location", "location($X,$Y)"   )  
						}
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
				state("returnClientState") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("clientStateReq(ID)"), Term.createTerm("clientStateReq(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ID = payloadArg(0)  
								solve("client($ID,S,L)","") //set resVar	
								 val S = getCurSol("S").toString() 
								answer("clientStateReq", "clientStateRep", "clientStateRep($ID,$S)"   )  
						}
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
				state("informInterruption") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cleaningInterrupted(Time,T)"), Term.createTerm("cleaningInterrupted(Time,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var RemainingTime = payloadArg(0) 
												var TeatableNumber = payloadArg(1)
								solve("replaceRule(teatable($TeatableNumber,_,_,CS),teatable($TeatableNumber,dirty,$RemainingTime,CS))","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="listenToChanges", cond=doswitch() )
				}	 
			}
		}
}
